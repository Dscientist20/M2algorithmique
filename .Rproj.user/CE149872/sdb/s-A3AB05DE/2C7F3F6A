{
    "collab_server" : "",
    "contents" : "##  GPL-3 License\n## Copyright (c) 2020 Vincent Runge\n\n#' Insertion sort algorithm\n#'\n#' @description Sorting by insertion\n#' @param v an unsorted vector of numeric data\n#' @return the sorted vector\ninsertion_sort <- function(v)\n{\n  for(j in 2:length(v)) \n  {\n    key <- v[j] \n    i <- j - 1 \n    while(i > 0 && v[i] > key)\n    {\n      v[i + 1] <- v[i]\n      i <- i - 1 \n    }\n    v[i + 1] <- key\n  }\n  return(v)\n} \n\n#########################################################\n#########################################################\n\n#' Heap sort algorithm\n#'\n#' @description Sorting by insertion with a heap structure\n#' @param v an unsorted vector of numeric data\n#' @param type there are two versions for the heap building : a recursive one and a direct one\n#' @return the sorted vector\nheap_sort <- function(v, type = \"notRecursive\")\n{\n  n <- length(v)\n  if(type == \"notRecursive\")\n  {\n    for(i in (n%/%2):1)\n    {\n      v <- build_heap(v, i, n)\n    }\n    for(i in n:2)\n    {\n      temp <- v[i]\n      v[i] <- v[1]\n      v[1] <- temp\n      v <- build_heap(v, 1, i-1)\n    }\n  }\n  else\n  {\n    for(i in (n%/%2):1)\n    {\n      v <- build_heap_recursive(v, i, n)\n    }\n    for(i in n:2)\n    {\n      temp <- v[i]\n      v[i] <- v[1]\n      v[1] <- temp\n      v <- build_heap_recursive(v, 1, i-1)\n    }\n  }\n  return(v)\n}\n\n####################\n\nbuild_heap <- function(heap, i, n)\n{\n  k <- i\n  l <- 2*k\n  while(l <= n)\n  {\n    if((l < n) && (heap[l] < heap[l+1])){l <- l + 1} #choose the right son\n    if(heap[k] < heap[l]) #switch the node values\n    {\n      temp <- heap[k]\n      heap[k] <- heap[l]\n      heap[l] <- temp\n      k <- l\n      l <- 2*k\n    }\n    else\n    {\n      l <- n + 1\n    }\n  }\n  return(heap)\n}\n\n\n####################\n\nbuild_heap_recursive <- function(heap, i, n)\n{\n  l <- 2*i\n  if(l <= n)\n  {\n    if((l < n) && (heap[l] < heap[l+1])){l <- l + 1} #choose the right son\n    if(heap[i] < heap[l]) #switch the node values\n    {\n      temp <- heap[i]\n      heap[i] <- heap[l]\n      heap[l] <- temp\n      heap <- build_heap_recursive(heap, l, n)\n    }\n  }\n  return(heap)\n}\n\n",
    "created" : 1604325686887.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3797735559",
    "id" : "2C7F3F6A",
    "lastKnownWriteTime" : 1604398626,
    "last_content_update" : 1604398626865,
    "path" : "~/Dropbox/A4_ENSEIGNEMENTS/M2_DS_Algorithmique/packagesRcpp/M2algorithmique/R/sorting_Algorithms.R",
    "project_path" : "R/sorting_Algorithms.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}