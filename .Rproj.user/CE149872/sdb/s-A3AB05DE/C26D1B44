{
    "collab_server" : "",
    "contents" : "\nM2algorithmique Vignette\n========================\n\n### Vincent Runge\n\n#### LaMME, Evry Paris-Saclay University\n\n### November 3, 2020\n\n> [Quick Start](#qs)\n\n> [Comparing time complexity of the 4 algorithms](#com)\n\n<a id=\"qs\"></a>\n\nQuick Start\n-----------\n\nThe `M2algorithmique` R package is an **example package** developed for students building their own R/Rcpp package as part of the **algorithmic M2 courses**. This package contains two algorithmic strategies (insertion sort and heap sort) implemented in R and in Rcpp.\n\nInsertion sort is of time complexity *O*(*n*<sup>2</sup>) as heap sort is *O*(*n*log(*n*)) (worst case complexity). We aim at highlighting two important features with this package:\n\n1.  Rcpp algorithms are much efficient than their R counterpart\n2.  Time complexities can be compared to one another\n\n### Package installation\n\nYou first need to install the `devtools` package, it can be done easily from Rstudio. We install the package from Github (remove the \\# sign):\n\n``` r\n#devtools::install_github(\"vrunge/M2algorithmique\")\nlibrary(M2algorithmique)\n```\n\n### A first simple test\n\nWe simulate simple data as follows, with `v` a vector as size `n` containing all the integers from `1` to `n` (exactly one time) in any order.\n\n``` r\nn <- 10\nv <- sample(n)\n```\n\nWe've implemeted 4 algorithms:\n\n-   `insertion_sort`\n-   `heap_sort`\n-   `insertion_sort_Rcpp`\n-   `heap_sort_Rcpp`\n\nThey all have a simple argument: the unsorted vector `v`.\n\n``` r\nv\n```\n\n    ##  [1] 10  6  4  9  8  7  5  1  2  3\n\n``` r\ninsertion_sort(v)\n```\n\n    ##  [1]  1  2  3  4  5  6  7  8  9 10\n\n`insertion_sort(v)` returns the sorted vector from `v`.\n\n<a id=\"com\"></a>\n\nComparing time complexity of the 4 algorithms\n---------------------------------------------\n\nWe run all the following example at a fixed vector length `n = 10000`.\n\n### One simulation\n\nWe define a function `one.simu` to simplify the simulation study for time complexity.\n\n``` r\none.simu <- function(n, type = \"sample\", func = \"insertion_sort\")\n{\n  if(type == \"sample\"){v <- sample(n)}else{v <- n:1}\n  if(func == \"insertion_sort\"){t <- system.time(insertion_sort(v))[[1]]}\n  if(func == \"heap_sort\"){t <- system.time(heap_sort(v))[[1]]} \n  if(func == \"insertion_sort_Rcpp\"){t <- system.time(insertion_sort_Rcpp(v))[[1]]}\n  if(func == \"heap_sort_Rcpp\"){t <- system.time(heap_sort_Rcpp(v))[[1]]}\n  return(t)\n}\n```\n\nWe evaluate the time with a given n over the 4 algorithms\n\n``` r\nn <- 10000\none.simu(n, func = \"insertion_sort\")\n```\n\n    ## [1] 3.38\n\n``` r\none.simu(n, func = \"heap_sort\")\n```\n\n    ## [1] 0.242\n\n``` r\none.simu(n, func = \"insertion_sort_Rcpp\")\n```\n\n    ## [1] 0.019\n\n``` r\none.simu(n, func = \"heap_sort_Rcpp\")\n```\n\n    ## [1] 0.002\n\n### Some comparisons\n\nwe compare the running time at a given length n with repeated executions (nbSimus times)\n\n``` r\nnbSimus <- 10\ntime1 <- 0\ntime2 <- 0\ntime3 <- 0\ntime4 <- 0\nfor(i in 1:nbSimus){time1 <- time1 + one.simu(n, func = \"insertion_sort\")}\nfor(i in 1:nbSimus){time2 <- time2 + one.simu(n, func = \"heap_sort\")}\nfor(i in 1:nbSimus){time3 <- time3 + one.simu(n, func = \"insertion_sort_Rcpp\")}\nfor(i in 1:nbSimus){time4 <- time4 + one.simu(n, func = \"heap_sort_Rcpp\")}\n\n#gain R -> Rcpp\ntime1/time3\n```\n\n    ## [1] 167.7413\n\n``` r\ntime2/time4\n```\n\n    ## [1] 140.8421\n\n``` r\n#gain insertion -> heap\ntime1/time2\n```\n\n    ## [1] 12.5994\n\n``` r\ntime3/time4\n```\n\n    ## [1] 10.57895\n\n``` r\n#max gain\ntime1/time4\n```\n\n    ## [1] 1774.526\n",
    "created" : 1604426545054.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "185367507",
    "id" : "C26D1B44",
    "lastKnownWriteTime" : 1604427122,
    "last_content_update" : 1604427122,
    "path" : "~/Dropbox/A4_ENSEIGNEMENTS/M2_DS_Algorithmique/packagesRcpp/M2algorithmique/README.md",
    "project_path" : "README.md",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "markdown"
}