{
    "collab_server" : "",
    "contents" : "#ISOTONIC REGRESSION\n\nlibrary(isotone) ## slow but more general\nlibrary(UniIsoRegression)\nlibrary(stats)\n#https://www.sciencedirect.com/science/article/pii/S0167947308003964?via%3Dihub\n## noise = corrupted simular to figure in https://arxiv.org/pdf/1707.09157.pdf\n#reg_1d -> package UniIsoRegression\n#isoreg -> package stats\n\n#devtools::install_github(\"vrunge/gfpop\", force = TRUE)\nlibrary(gfpop)\n\n####################################################################################################\n#########################\n# DATA SIMULATION FUNCTION\n\nsimuData <- function(n = 10^3, D = 10, type = \"isostep\", noise = \"student\", dfree = 3, pcorr = 0.3, sigma = 10, length = \"regular\", min.length = 10)\n{\n  # n = nb points\n  # k = nb steps\n  # type = isostep OR isolinear\n  # noise = student OR corrupted\n  # dfree = for student distribution : degree of freedom\n  # pcorr = percent of corrupted data\n  ###\n  ### type of function. DATA FROM 0 TO 100 !\n  ###\n  if(length == \"regular\")\n  {\n    if(type == \"isostep\")\n    {\n      data <- list()\n      data$signal <- (floor(seq(from = 0, to = D-0.000001, length.out = n)))*100/D\n      data$signal <-  data$signal - mean(data$signal)\n      data$y <- data$signal ## modified later\n      data$w <- rep(1, length(data$y))\n      data$D <- D\n    }\n    if(type == \"isolinear\")\n    {\n      data <- list()\n      data$signal <- (0:(n-1))*(100/n)\n      data$signal <-  data$signal - mean(data$signal)\n      data$y <- data$signal ## modified later\n      data$w <- rep(1, length(data$y))\n      data$D <- D\n    }\n  }\n\n  if(length == \"nonregular\") #only case type == \"isolinear\"\n  {\n    data <- list()\n    LengthSegment <- diff(c(0, sort(sample(n - D*min.length, D-1, replace = FALSE)), n - D*min.length)) + min.length\n    data$signal <- rep(0:(D-1)*100/D, LengthSegment)\n    data$signal <-  data$signal - mean(data$signal)\n    data$y <- data$signal ## modified later\n    data$w <- rep(1, length(data$y))\n    data$D <- D\n  }\n\n  ###\n  ### noise\n  ###\n  if(noise == \"student\")\n  {\n    data$y <- data$y + sigma*sqrt((dfree-2)/dfree)*rt(length(data$y), df = dfree) #Student t distribution (!= gauss; heavy tails)\n  }\n\n  if(noise == \"corrupted\")\n  {\n    data$y <- data$y + sigma*rnorm(length(data$y)) #gaussian distribution\n    isp <- sample(1:n, trunc(pcorr*n))\n    data$y[isp] <- -data$y[isp] #opposition for data indices in isp\n  }\n\n  if(noise == \"gauss\")\n  {\n    data$y <- data$y + sigma*rnorm(length(data$y)) #gaussian distribution\n  }\n\n\n  return(data)\n}\n\n\n################################################################################################\n#########################\n# ESTIMATE TIME AND FIT\n\nestimateAllSeg <- function(simuData, type = \"mean\", K = 2, pen = 2)\n{\n  time <- c()\n  fit <- list()\n\n  time[1]  <- system.time(fit[[1]] <- isoreg(simuData$y)$yf)[3]\n  time[2]  <- system.time(fit[[2]] <- reg_1d(simuData$y, simuData$w, metric = 2, unimodal = FALSE, decreasing = FALSE))[3]\n  time[3]  <- system.time(fit[[3]] <- reg_1d(simuData$y, simuData$w, metric = 1, unimodal = FALSE, decreasing = FALSE))[3]\n\n  time[4]  <- system.time(isoFpop4 <- gfpop(data = simuData$y, weights = simuData$w, mygraph = graph(penalty = 0, type = \"isotonic\"), type = type))[3]\n  time[5]  <- system.time(isoFpop5 <- gfpop(data = simuData$y, weights = simuData$w, mygraph = graph(penalty = 0, type = \"isotonic\", K = K), type = type))[3]\n  #time[6]  <- time[4]\n  #time[7]  <- time[5]\n  #isoFpop6 <- isoFpop4\n  #isoFpop7 <- isoFpop5\n\n  time[6]  <- system.time(isoFpop6 <- gfpop(data = simuData$y, weights = simuData$w, mygraph = graph(penalty = pen, type = \"isotonic\"), type = type))[3]\n  time[7]  <- system.time(isoFpop7 <- gfpop(data = simuData$y, weights = simuData$w, mygraph = graph(penalty = pen, type = \"isotonic\", K = K), type = type))[3]\n\n  fit[[4]] <- rep(isoFpop4$parameters, diff(c(0, isoFpop4$changepoints)))\n  fit[[5]] <- rep(isoFpop5$parameters, diff(c(0, isoFpop5$changepoints)))\n  fit[[6]] <- rep(isoFpop6$parameters, diff(c(0, isoFpop6$changepoints)))\n  fit[[7]] <- rep(isoFpop7$parameters, diff(c(0, isoFpop7$changepoints)))\n\n  response <- list(time =  time, fit = fit)\n  return(response)\n}\n\n\n\n\nMSEall <- function(data, estimate)\n{\n  n <- length(data$signal)\n  res <- data.frame(matrix(0, nrow = 1, ncol = 7))\n\n  for(i in 1:7)\n  {\n    u <- data$signal - estimate$fit[[i]]\n    res[1,i] <- (1/n)*(t(u)%*%u)\n  }\n  return(res)\n}\n\n\n\nMSEdataSignal <- function(data, signal, method = \"NONE\")\n{\n  if(method == \"NONE\")\n  {\n    n <- length(data)\n    u <- data - signal\n    res <- (1/n)*(t(u)%*%u)\n  }\n  if(method == \"linear\")\n  {\n    n <- length(data)\n    x <- 1:n\n    linearMod <- lm(data ~ x)\n    line <- linearMod$coefficients[1] + linearMod$coefficients[2]*x\n    u <- line - signal\n    res <- (1/n)*(t(u)%*%u)\n  }\n  return(res)\n}\n\n####################################################################################################\n#########################\n# getK nb of segments for each estimate\n\ngetD <- function(estimate)\n{\n  res <- sapply(estimate$fit, FUN = function(x) sum(diff(x) != 0))\n  return(res + 1)\n}\n\n################################################################################################\n################################################################################################\n################################################################################################\n\nvarDiff <- function(x)\n{\n  res = mad(diff(x)/sqrt(2))\n  return(res)\n}\n\n#varDiff sous-estime la variance dans le cas student\n\n\nvarDiff <- function(x, method = 'HALL'){\n  if(method == \"SD\")\n  {\n    return(sd(diff(x)/sqrt(2)))\n  }\n  if(method == \"MAD\")\n  {\n    return(mad(diff(x)/sqrt(2)))\n  }\n  if(method == \"HALL\")\n  {\n    n = length(x)\n    wei <- c(0.1942, 0.2809, 0.3832, -0.8582)\n    mat <- wei %*% t(x)\n\n    mat[2, -n] = mat[2, -1]\n    mat[3, -c(n-1, n)] = mat[3, -c(1, 2)]\n    mat[4, -c(n-2, n-1, n)] = mat[4, -c(1, 2, 3)]\n    return(sqrt(sum(apply(mat[, -c(n-2, n-1, n)], 2, sum)^2) / (n-3)))\n  }\n}\n\n\n\nplotAllSeg <- function(data, estimate)\n{\n  plot(data$y, pch = \"+\", cex = 1.8) #cex = 1.2\n  lty <- c(1, 2, 3, 4, 5, 6, 7)\n  col <- c(\"black\", \"blue\", \"red\", \"yellow\", \"orange\", \"magenta\", \"green\")\n  for(i in 1:7) lines(estimate$fit[[i]], lty = lty[i], lwd = 2, col = col[i])\n}\n\n\n\n\nplotSeg <- function(data, estimate)\n{\n  plot(data$y, pch = \".\", cex = 1) #cex = 1.2\n  lty <- c(1, 3, 7)\n  col <- c(\"red\", \"magenta\", \"blue\")\n  ttype <- c(4, 1, 5)\n  lines(data$signal, lwd = 1.9, col = \"black\")\n  for(i in 1:3) lines(estimate$fit[[lty[i]]], lwd = 2, lty = ttype[i], col = col[i])\n  legend(\"bottomright\", legend=c(\"true signal\", \"isoreg\", \"reg_1d L1\", \"gfpop4\"),\n         col=c(\"black\",col), lty=c(1,ttype), lwd = 2, cex=1.5)\n}\n\n\n",
    "created" : 1604421575337.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1879834896",
    "id" : "91076BF1",
    "lastKnownWriteTime" : 1578945557,
    "last_content_update" : 1578945557,
    "path" : "~/MYRPACKAGES/gfpop_testing_version/simulations/iso_functions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}