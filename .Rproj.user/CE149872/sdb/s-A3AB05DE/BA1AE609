{
    "collab_server" : "",
    "contents" : "// -*- mode: C++; c-indent-level: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-\n//\n// exporter.h: Rcpp R/C++ interface class library -- identify if a class has a nested iterator typedef\n//\n// Copyright (C) 2010 - 2013 Dirk Eddelbuettel and Romain Francois\n//\n// This file is part of Rcpp.\n//\n// Rcpp is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 2 of the License, or\n// (at your option) any later version.\n//\n// Rcpp is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Rcpp.  If not, see <http://www.gnu.org/licenses/>.\n\n#ifndef Rcpp__internal__exporter__h\n#define Rcpp__internal__exporter__h\n\nnamespace Rcpp{\n    namespace traits{\n\n\t\ttemplate <typename T>\n\t\tclass Exporter{\n\t\tpublic:\n\t\t    Exporter( SEXP x ) : t(x){}\n\t\t    inline T get(){ return t ; }\n\n\t\tprivate:\n\t\t    T t ;\n\t\t} ;\n\n\t\ttemplate <typename T> class RangeExporter {\n\t\tpublic:\n\t\t    typedef typename T::value_type r_export_type ;\n\n\t\t    RangeExporter( SEXP x ) : object(x){}\n\t\t    ~RangeExporter(){}\n\n\t\t    T get(){\n\t\t        T vec( ::Rf_length(object) );\n\t\t        ::Rcpp::internal::export_range( object, vec.begin() ) ;\n\t\t        return vec ;\n\t\t    }\n\n\t\tprivate:\n\t\t    SEXP object ;\n\t\t} ;\n\n\t\ttemplate <typename T, typename value_type> class IndexingExporter {\n        public:\n            typedef value_type r_export_type ;\n\n            IndexingExporter( SEXP x) : object(x){}\n            ~IndexingExporter(){}\n\n            T get(){\n                T result( ::Rf_length(object) ) ;\n                ::Rcpp::internal::export_indexing<T,value_type>( object, result ) ;\n                return result ;\n            }\n\n        private:\n            SEXP object ;\n        } ;\n\n        template <typename T, typename value_type> class MatrixExporter {\n        public:\n            typedef value_type r_export_type ;\n\n            MatrixExporter( SEXP x) : object(x){}\n            ~MatrixExporter(){}\n\n            T get() {\n                Shield<SEXP> dims( ::Rf_getAttrib( object, R_DimSymbol ) ) ;\n                if( Rf_isNull(dims) || ::Rf_length(dims) != 2 ){\n                    throw ::Rcpp::not_a_matrix() ;\n                }\n                int* dims_ = INTEGER(dims) ;\n                T result( dims_[0], dims_[1] ) ;\n                ::Rcpp::internal::export_indexing<T,value_type>( object, result ) ;\n                return result ;\n            }\n\n        private:\n            SEXP object ;\n        } ;\n\n        template < template<class,class> class Container, typename T>\n        struct container_exporter{\n        \t\ttypedef RangeExporter< Container<T, std::allocator<T> > > type ;\n        } ;\n        template < template<class,class> class Container > struct container_exporter< Container, int > ;\n        template < template<class,class> class Container > struct container_exporter< Container, double > ;\n\n        template <typename T> class Exporter< std::vector<T> > : public container_exporter< std::vector, T>::type {\n        public:\n            Exporter(SEXP x) : container_exporter< std::vector, T>::type(x){}\n        };\n        template <typename T> class Exporter< std::deque<T> > : public container_exporter< std::deque, T>::type {\n        public:\n            Exporter(SEXP x) : container_exporter< std::deque, T>::type(x){}\n        };\n        template <typename T> class Exporter< std::list<T> > : public container_exporter< std::list, T>::type {\n        public:\n            Exporter(SEXP x) : container_exporter< std::list, T>::type(x){}\n        };\n\n    } // namespace traits\n} // namespace Rcpp\n#endif\n",
    "created" : 1604416148736.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "497437398",
    "id" : "BA1AE609",
    "lastKnownWriteTime" : 1604312201,
    "last_content_update" : 1604312201,
    "path" : "~/R/x86_64-pc-linux-gnu-library/3.6/Rcpp/include/Rcpp/internal/Exporter.h",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}