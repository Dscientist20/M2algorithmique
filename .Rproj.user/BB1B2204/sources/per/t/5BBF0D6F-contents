---
title: "Réorganisation des données de prescriptions"
author: "Jawad Boulahfa"
date: "06 août 2020"
output:
  prettydoc::html_pretty:
    toc: true
    theme: cayman
    highlight: github
    df_print : paged
---

```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo=FALSE}
# Première partie: réorganisation des données

rm(list = ls())
```

```{r, echo=FALSE}
## Installation du package nnls2d

#devtools::install_github("Jawad-Boulahfa/nnls2d")
```

```{r, results='hide', message=FALSE, warning=FALSE, echo=FALSE}
## Chargement des packages

# Pour ggplot2 et la manipulation des data frames
library(tidyverse, quietly = TRUE)

# Pour le tri des data frames
library(gtools)

# Pour les factors
library(forcats)

# Pour les dates
library(lubridate)

# Lecture des fichiers xlsx
library(readxl)

# Pour manipuler les chaînes de caractères
library(stringr)
library(stringi)

# Pour les data frames
library(reshape2)
```

## Réorganisation des données

```{r, warning=FALSE}
## Chargement des données

setwd("C:/Users/runge/Dropbox/A9_anticholinergique/#MyRCode/General/")
prescriptions <- read.csv(
  file = "CH-Rouffach-Prescriptions-2008-2018_v1.txt",
  sep = "|", dec = ".", header = TRUE, quote = "", fill = FALSE)
```

### Type de chaque variable

On change les types des variables dont le type n'est pas le bon.
```{r}
# Conversion de IMC en réel
prescriptions <- prescriptions %>% mutate(IMC = as.double(IMC)/100)

# Conversion de Si.besoin en facteur
prescriptions <- prescriptions %>%
  mutate(Si.besoin = as.factor(Si.besoin))

# Conversion de Heure.de.prise en facteur
prescriptions <- prescriptions %>%
  mutate(Heure.de.prise = as.factor(Heure.de.prise))


# Conversion de Rythme.date.de.debut en date
prescriptions <- prescriptions %>%
  mutate(Rythme.date.de.debut =
           as.Date(Rythme.date.de.debut,
                            format = "%d/%m/%Y"))

# Conversion de Date.heure.debut.d.adm.
# (date avec heures minutes)
prescriptions <- prescriptions %>%
  mutate(Date.heure.debut.d.adm. =
           as.POSIXct(as.character(Date.heure.debut.d.adm.),
                               format = "%d/%m/%Y %H:%M"))


# Conversion de Date.heure.fin.d.adm.
# (date avec heures minutes)
prescriptions <- prescriptions %>% 
    mutate(Date.heure.fin.d.adm. =
           as.POSIXct(as.character(Date.heure.fin.d.adm.),
                               format = "%d/%m/%Y %H:%M"))
```

Les DCI non renseignés seront maintenant indiqués comme NA.
```{r}
levels(prescriptions$DCI.produit)[
  levels(prescriptions$DCI.produit) == ""] <- NA
```

Les observations non renseignées seront maintenant indiquées comme NA.
```{r}
levels(prescriptions$observation.ligne.prescription)[
  levels(prescriptions$observation.ligne.prescription) == ""] <- NA
```

On corrige la valeur extrême pour la taille par NA.
```{r}
prescriptions$Taille[prescriptions$Taille == 0.02] <- NA
```

```{r}
# Conversion de DCI.produit en chaîne de caractères
prescriptions <- prescriptions %>%
  mutate(DCI.produit = as.character(DCI.produit))

# Conversion de Nom.commercial.produit en chaîne de caractères
prescriptions <- prescriptions %>%
  mutate(Nom.commercial.produit = as.character(Nom.commercial.produit))

# Conversion de observation.ligne.prescription
# en chaîne de caractères
prescriptions <- prescriptions %>% 
    mutate(observation.ligne.prescription =
             as.character(observation.ligne.prescription))
```

Maintenant, les dates ont le bon type.
```{r}
class(prescriptions$Date.heure.debut.d.adm.)
class(prescriptions$Date.heure.fin.d.adm.)
```

On affiche le type des autres variables.
```{r}
subset(prescriptions, select =
         -c(Date.heure.debut.d.adm., Date.heure.fin.d.adm.)) %>%
  dplyr::summarise_all(class) %>% tidyr::gather(variable, class)
```

### Comptage du nombre de NA

```{r}
# On compte le nombre de NA avec NA_count
# which(is.na) renvoie les indices où is.na = TRUE 
# => length(which(is.na)) = nombre de NA. 

#NA_count <- sapply(prescriptions, function(y) length(which(is.na(y))))

NA_count <- prescriptions %>% sapply(
  function(y) length(which(is.na(y)))
  )
NA_freq <- prescriptions %>% sapply(
  function(y) length(which(is.na(y)))/length(y)
  )

NA_df <- data.frame(NA_count, NA_freq = paste(round(100*NA_freq,2), "%"))
```

```{r}
NA_df
```

```{r}
rm(NA_count, NA_freq)
```

### Nombre de modalités de chaque variable

```{r}
nb_modalites_df <-
  data.frame(nb_modalites = prescriptions %>%
               sapply(function(y) length(unique(y))))
```

```{r}
nb_modalites_df
```

### Liste des médicaments et des DCI

```{r}
liste_medicaments <-
  prescriptions %>% distinct(DCI.produit, Nom.commercial.produit) %>%
  arrange_all()
```

```{r}
liste_DCI <- prescriptions %>% distinct(DCI.produit) %>%
  arrange(DCI.produit)
```

### Renumérotation des patients

```{r}
prescriptions <-
  prescriptions %>% mutate(
    Patient = as.integer(NIP.IPP)) %>% arrange(
      NIP.IPP, Patient, Date.heure.debut.d.adm.,
      Age.en.debut.d.adm., Date.heure.fin.d.adm.)

prescriptions <- prescriptions %>% 
    mutate(Date.heure.debut.d.adm.char. =
           strftime(Date.heure.debut.d.adm., format = "%d/%m/%Y %H:%M")
    )
                               

prescriptions <- prescriptions %>% 
    mutate(Date.heure.fin.d.adm.char. =
           strftime(Date.heure.fin.d.adm., format = "%d/%m/%Y %H:%M")
           )
```

### Normalisation des dates

```{r}
load(file = "Dates_debut_normalisees.Rda")
load(file = "Dates_fin_normalisees.Rda")
```

```{r}
prescriptions <-
  prescriptions %>% mutate(Date.debut.d.adm.normalisee = vecteur_debut,
                           Date.fin.d.adm.normalisee = vecteur_fin)
```

```{r}
rm(vecteur_debut, vecteur_fin)
```

### Ajout des colonnes effet correcteur et sphère

```{r}
load(file = "Correction.Rda")
load(file = "Sphere.Rda")
```

```{r}
prescriptions <- prescriptions %>%
  mutate(Correction = vecteur_correction, Sphere = vecteur_sphere)
```

```{r}
prescriptions <- prescriptions %>% mutate(Correction = factor(Correction))
```

```{r}
prescriptions$Sphere[prescriptions$Sphere == "Substitut lacrimal"] <-
  "Substitut lacrymal"
```

```{r}
rm(vecteur_correction, vecteur_sphere)
```

### Construction des séjours par patient

On stocke le nombre de patients dans une variable.
```{r}
## Calcul du nombre de patients

nb_patients <- length(unique(prescriptions$Patient))
```

```{r}
liste_dates_patient_df <-
  prescriptions %>% dplyr::select(Patient, Date.debut.d.adm.normalisee,
                                  Date.fin.d.adm.normalisee) %>%
  split(f = prescriptions$Patient)
```

```{r}
vecteur_sejour <- rep(1, nrow(prescriptions))
indice <- 1

for(i in 1:nb_patients)
{
  compteur <- 1
  for(j in 1:nrow(liste_dates_patient_df[[i]]))
  {
    if(indice != 1)
      vecteur_sejour[indice] <- vecteur_sejour[indice-1]
    
    if(j != 1)
    {
      if(liste_dates_patient_df[[i]]$Date.debut.d.adm.normalisee[j] -
         liste_dates_patient_df[[i]]$Date.debut.d.adm.normalisee[j-1] >= 300)
      {
        compteur <- compteur + 1
      }
    }
    vecteur_sejour[indice] <- compteur
    indice <- indice + 1
  }
}
```

```{r}
prescriptions <- prescriptions %>% plyr::mutate(Sejour = vecteur_sejour)
```

```{r}
rm(vecteur_sejour, indice, liste_dates_patient_df)
```

### Recalcul de l'IMC

```{r}
prescriptions <- prescriptions %>% mutate(New.IMC = Poids/Taille^2)
```

### Réorganisation des colonnes

```{r}
prescriptions <- prescriptions %>%
  dplyr::select(Patient, Sejour, DCI.produit, Nom.commercial.produit,
                Date.debut.d.adm.normalisee, Date.fin.d.adm.normalisee,
                Posologie, Sexe, Age.en.debut.d.adm., Poids, IMC,
                New.IMC, Correction, Sphere, Heure.de.prise,
                Si.besoin, Voie.d.adm., Unite.d.adm., everything())
```

### Comptage du nombre de NA après réorganisation

```{r}
# On compte le nombre de NA avec NA_count
# which(is.na) renvoie les indices où is.na = TRUE 
# => length(which(is.na)) = nombre de NA. 

#NA_count <- sapply(prescriptions, function(y) length(which(is.na(y))))

NA_count <- prescriptions %>% sapply(
  function(y) length(which(is.na(y)))
  )
NA_freq <- prescriptions %>% sapply(
  function(y) length(which(is.na(y)))/length(y)
  )

NA_df <- data.frame(NA_count, NA_percent = paste(round(100*NA_freq,2), "%"))
```

```{r}
NA_df
```

```{r}
rm(NA_count, NA_freq)
```

### Nombre de modalités de chaque variable après réorganisation

```{r}
nb_modalites_df <-
  data.frame(nb_modalites = prescriptions %>%
               sapply(function(y) length(unique(y))))
```

```{r}
nb_modalites_df
```

## Résumé des informations par patient

### Nombre de lignes de prescriptions par patient

```{r}
nb_prescriptions <-
  prescriptions %>% group_by(NIP.IPP, Patient) %>%
  summarise(nb_prescriptions = n())
```

### Ajout de la colonne Sexe

```{r}
patient_sexe_df <- prescriptions %>% distinct(Patient, Sexe)
```

```{r}
nb_prescriptions <- nb_prescriptions %>%
  plyr::mutate(Sexe = patient_sexe_df$Sexe)
```

```{r}
rm(patient_sexe_df)
```

### Nombre de médicaments par patient

```{r}
load(file = "df_nb_medicaments.Rda")
```

```{r}
colnames(df_nb_medicaments) <- c("nb_medicaments")
```

```{r}
nb_prescriptions <- nb_prescriptions %>% bind_cols(df_nb_medicaments)
```

```{r}
rm(df_nb_medicaments)
```

### Nombre de lignes de prescriptions psy/correctrices par patient

```{r}
load(file = "Antichol.Rda")
```

```{r}
nb_prescriptions <- nb_prescriptions %>%
  plyr::mutate(nb_prescriptions_antichol = vecteur_antichol,
         nb_prescriptions_psy = nb_prescriptions - vecteur_antichol)
```

```{r}
rm(vecteur_antichol)
```

### Nombre de médicaments psy/correcteurs par patient

```{r}
load(file = "df_nb_medicaments_antichol_psy.Rda")
```

```{r}
colnames(df_nb_medicaments_antichol_psy) <-
  c("nb_medicaments_antichol", "nb_medicaments_psy")
```

```{r}
nb_prescriptions <-
  nb_prescriptions %>% bind_cols(df_nb_medicaments_antichol_psy)
```

```{r}
rm(df_nb_medicaments_antichol_psy)
```

```{r}
nb_prescriptions <- nb_prescriptions %>% subset(select = -NIP.IPP) %>%
  dplyr::select(Patient, Sexe, nb_prescriptions,
                nb_prescriptions_antichol, nb_prescriptions_psy,
                nb_medicaments, nb_medicaments_antichol,
                nb_medicaments_psy)
```

### Nombre de DCI par patient

```{r}
DCI_patient_df <- prescriptions %>% group_by(DCI.produit, Patient) %>%
  tally(name = "DCI.count", sort = TRUE) %>% arrange(Patient)
```

```{r}
liste_DCI_patient <- DCI_patient_df %>% split(f = DCI_patient_df$Patient)
```

```{r}
vecteur_nb_DCI_patient <- rep(0, nb_patients)

for(i in 1:nb_patients)
{
  vecteur_nb_DCI_patient[i] <- nrow(liste_DCI_patient[[i]])
}
```

```{r}
nb_prescriptions <- nb_prescriptions %>%
  plyr::mutate(nb_DCI = vecteur_nb_DCI_patient)
```

```{r}
rm(vecteur_nb_DCI_patient)
```

### Nombre de DCI psy/correcteurs par patient

```{r}
load(file = "df_nb_DCI_antichol_psy.Rda")
```

```{r}
colnames(df_nb_DCI_antichol_psy) <- c("nb_DCI_antichol", "nb_DCI_psy")
```

```{r}
nb_prescriptions <- nb_prescriptions %>% bind_cols(df_nb_DCI_antichol_psy)
```

### Calcul de l'âge moyen, du poids moyen et de l'IMC (recalculé) moyen par patient

```{r}
#vecteur_age_moyen <- rep(0, nb_patients)
#
#for(i in 1:nb_patients)
#{
#  if(i %% 100 == 0)
#    print(i)
#  
#  vecteur_age_moyen[i] <-
#    mean((prescriptions %>% subset(Patient == i))$Age.en.debut.d.adm., na.rm = TRUE)
#}
```

```{r}
#vecteur_poids_moyen <- rep(0, nb_patients)
#vecteur_IMC_moyen <- rep(0, nb_patients)
#
#for(i in 1:nb_patients)
#{
#  if(i %% 100 == 0)
#    print(i)
#  
#  vecteur_poids_moyen[i] <-
#    mean((prescriptions %>% subset(Patient == i))$Poids, na.rm = TRUE)
#
#  vecteur_IMC_moyen[i] <-
#    mean((prescriptions %>% subset(Patient == i))$New.IMC, na.rm = TRUE)
#}
```

```{r}
#save(vecteur_age_moyen, file = "Age_moyen.Rda")
#save(vecteur_poids_moyen, file = "Poids_moyen.Rda")
#save(vecteur_IMC_moyen, file = "New.IMC_moyen.Rda")
```

```{r}
load(file = "Age_moyen.Rda")
load(file = "Poids_moyen.Rda")
load(file = "New.IMC_moyen.Rda")
```

```{r}
nb_prescriptions <- nb_prescriptions %>%
  plyr::mutate(Age_moyen = vecteur_age_moyen,
               Poids_moyen = vecteur_poids_moyen,
               New.IMC_moyen = vecteur_IMC_moyen)
```

```{r}
nb_prescriptions$Poids_moyen[is.nan(nb_prescriptions$Poids_moyen)] <- NA
nb_prescriptions$New.IMC_moyen[is.nan(nb_prescriptions$New.IMC_moyen)] <- NA
```

```{r}
rm(vecteur_age_moyen, vecteur_poids_moyen, vecteur_IMC_moyen)
```

### Création du label Y (première version)

Si le traitement psy est mal supporté (existence de lignes de prescriptions pour corriger les effets secondaires), alors Y vaut 1, sinon il vaut 0.
```{r}
nb_prescriptions <-
  nb_prescriptions %>%
  mutate(Effets_secondaires =
           as.factor(as.numeric(nb_prescriptions_antichol != 0)))
```

```{r}
#nb_prescriptions <- nb_prescriptions %>% subset(select = -NIP.IPP)
```

```{r}
#save(nb_prescriptions, file = "recap_nb_prescriptions.Rda")
```

```{r}
#load(file = "recap_nb_prescriptions.Rda")
```

```{r}
nb_prescriptions <- nb_prescriptions %>%
  dplyr::select(Patient, Sexe, everything())
```

```{r}
nb_prescriptions
```

## Résumé des informations par patient et par séjour

### Nombre de lignes de prescriptions par patient et par séjour

```{r}
#nb_prescriptions_sejour <- prescriptions %>% group_by(Patient, Sejour) %>%
#  summarise(nb_prescriptions = n())
```

### Nombre de lignes de prescriptions psy/correctrices par patient et par séjour

```{r}
#patient_sejour_correction <-
#  prescriptions %>% dplyr::select(Patient, Sejour, Correction) %>%
#  group_by(Patient, Sejour, Correction) %>%
#  tally(name = "nb_prescriptions")
```

```{r}
#nb_prescriptions_sejour <-
#  nb_prescriptions_sejour %>%
#  plyr::mutate(nb_prescriptions_antichol =
#                 rep(0, nrow(nb_prescriptions_sejour)),
#               nb_prescriptions_psy =
#                 rep(0, nrow(nb_prescriptions_sejour)))
```

```{r}
#for(i in 1:nrow(nb_prescriptions_sejour))
#{
#  if(i %% 1000 == 0)
#    print(i)
#  
#  tmp <- patient_sejour_correction %>%
#    subset(Patient == nb_prescriptions_sejour$Patient[i] &
#             Sejour == nb_prescriptions_sejour$Sejour[i])
#  
#  if(nrow(tmp %>% subset(Correction == 1)) != 0)
#  {
#    nb_prescriptions_sejour$nb_prescriptions_antichol[i] <-
#      (tmp %>% subset(Correction == 1))$nb_prescriptions
#    
#  }
#     
#  if(nrow(tmp %>% subset(Correction == 0)) != 0)
#  {
#    nb_prescriptions_sejour$nb_prescriptions_psy[i] <-
#      (tmp %>% subset(Correction == 0))$nb_prescriptions
#  }
#}
#
#rm(tmp)
#rm(patient_sejour_correction)
```

```{r}
#save(nb_prescriptions_sejour, file = "Recap_patients_sejours.Rda")
```

### Ajout de la colonne sexe

```{r}
#patient_sexe_sejour_df <- prescriptions %>% distinct(Patient, Sejour, Sexe)
#
#nb_prescriptions_sejour <- nb_prescriptions_sejour %>%
#  plyr::mutate(Sexe = patient_sexe_sejour_df$Sexe)
#
#rm(patient_sexe_sejour_df)
```

### Nombre de DCI par patient et par séjour

```{r}
#tmp <- prescriptions %>% distinct(Patient, Sejour, DCI.produit)
#tmp <- tmp %>% group_by(Patient, Sejour) %>% tally(name = "nb_DCI")
#
#nb_prescriptions_sejour <- nb_prescriptions_sejour %>%
#  plyr::mutate(nb_DCI = tmp$nb_DCI)
#
#rm(tmp)
```

### Nombre de DCI psy/correcteurs par patient et par séjour

```{r}
#patient_sejour_correction_DCI <- prescriptions %>%
#  distinct(Patient, Sejour, DCI.produit, Correction) %>%
#  group_by(Patient, Sejour, Correction) %>%
#  tally(name = "nb_DCI")
```

```{r}
#nb_prescriptions_sejour <-
#  nb_prescriptions_sejour %>%
#  plyr::mutate(nb_DCI_antichol = rep(0, nrow(nb_prescriptions_sejour)),
#               nb_DCI_psy = rep(0, nrow(nb_prescriptions_sejour)))
```

```{r}
#for(i in 1:nrow(nb_prescriptions_sejour))
#{
#  #if(i %% 1000 == 0)
#  #  print(i)
#  
#  tmp <- patient_sejour_correction_DCI %>%
#    subset(Patient == nb_prescriptions_sejour$Patient[i] &
#             Sejour == nb_prescriptions_sejour$Sejour[i])
#  
#  if(nrow(tmp %>% subset(Correction == 1)) != 0)
#  {
#    nb_prescriptions_sejour$nb_DCI_antichol[i] <-
#      (tmp %>% subset(Correction == 1))$nb_DCI
#  }
#  
#  if(nrow(tmp %>% subset(Correction == 0)) != 0)
#  {
#    nb_prescriptions_sejour$nb_DCI_psy[i] <-
#      (tmp %>% subset(Correction == 0))$nb_DCI
#  }
#}
#
#rm(tmp)
#rm(patient_sejour_correction_DCI)
```

```{r}
#save(nb_prescriptions_sejour, file = "Recap_patients_sejours.Rda")
```

### Nombre de médicaments par patient et par séjour

```{r}
#tmp <- prescriptions %>% distinct(Patient, Sejour, Nom.commercial.produit)
#tmp <- tmp %>% group_by(Patient, Sejour) %>% tally(name = "nb_medicaments")
#
#nb_prescriptions_sejour <- nb_prescriptions_sejour %>%
#  plyr::mutate(nb_medicaments = tmp$nb_medicaments)
#
#rm(tmp)
```

### Nombre de médicaments psy/correcteurs par patient et par séjour

```{r}
#patient_sejour_correction_medicaments <- prescriptions %>%
#  distinct(Patient, Sejour, Nom.commercial.produit, Correction) %>%
#  group_by(Patient, Sejour, Correction) %>%
#  tally(name = "nb_medicaments")
```

```{r}
#nb_prescriptions_sejour <-
#  nb_prescriptions_sejour %>%
#  plyr::mutate(nb_medicaments_antichol =
#                 rep(0, nrow(nb_prescriptions_sejour)),
#               nb_medicaments_psy =
#                 rep(0, nrow(nb_prescriptions_sejour)))
```

```{r}
#for(i in 1:nrow(nb_prescriptions_sejour))
#{
#  if(i %% 1000 == 0)
#    print(i)
#  
#  tmp <- patient_sejour_correction_medicaments %>%
#    subset(Patient == nb_prescriptions_sejour$Patient[i] &
#             Sejour == nb_prescriptions_sejour$Sejour[i])
#  
#  if(nrow(tmp %>% subset(Correction == 1)) != 0)
#  {
#    nb_prescriptions_sejour$nb_medicaments_antichol[i] <-
#      (tmp %>% subset(Correction == 1))$nb_medicaments
#  }
#  
#  if(nrow(tmp %>% subset(Correction == 0)) != 0)
#  {
#    nb_prescriptions_sejour$nb_medicaments_psy[i] <-
#      (tmp %>% subset(Correction == 0))$nb_medicaments
#  }
#}
#
#rm(tmp)
```

```{r}
#save(nb_prescriptions_sejour, file = "Recap_patients_sejours.Rda")
```

### Calcul de l'âge moyen, du poids moyen et de l'IMC (recalculé) moyen par patient et par séjour

```{r}
#prescriptions_psy <- prescriptions %>% subset(Correction == 0)
#prescriptions_antichol <- prescriptions %>% subset(Correction == 1)

#nb_prescriptions_sejour_psy <- prescriptions_psy %>%
#  group_by(Patient, Sejour) %>%
#  summarise(nb_prescriptions_psy = n())
#
#nb_prescriptions_sejour_antichol <- prescriptions_antichol %>%
#  group_by(Patient, Sejour) %>%
#  summarise(nb_prescriptions_antichol = n())
```

```{r}
#nb_prescriptions_sejour <- nb_prescriptions_sejour %>%
#  plyr::mutate(Age_moyen = rep(0, nrow(nb_prescriptions_sejour)),
#               Poids_moyen = rep(0, nrow(nb_prescriptions_sejour)),
#               New.IMC_moyen = rep(0, nrow(nb_prescriptions_sejour)),
#               Effets_secondaires =
#                 rep(0, nrow(nb_prescriptions_sejour))) %>%
#  dplyr::select(Patient, Sexe, Sejour, nb_prescriptions,
#                nb_prescriptions_psy, nb_prescriptions_antichol,
#                nb_medicaments, nb_medicaments_psy,
#                nb_medicaments_antichol, nb_DCI, nb_DCI_psy,
#                nb_DCI_antichol, everything())
```

```{r}
#for(i in 1:nrow(nb_prescriptions_sejour))
#{
#  if(i%%1000 == 0)
#    print(i)
#  
#  tmp <- prescriptions %>%
#    subset(Patient == nb_prescriptions_sejour$Patient[i] &
#             Sejour == nb_prescriptions_sejour$Sejour[i])
#  
#  nb_prescriptions_sejour$Age_moyen[i] <-
#    mean(tmp$Age.en.debut.d.adm., na.rm = TRUE)
#  
#  nb_prescriptions_sejour$Poids_moyen[i] <-
#    mean(tmp$Poids, na.rm = TRUE)
#  
#  nb_prescriptions_sejour$New.IMC_moyen[i] <-
#    mean(tmp$New.IMC, na.rm = TRUE)
#}
#
#rm(tmp)
```

```{r}
#nb_prescriptions_sejour$Age_moyen[
#  is.nan(nb_prescriptions_sejour$Age_moyen)] <- NA
#
#nb_prescriptions_sejour$Poids_moyen[
#  is.nan(nb_prescriptions_sejour$Poids_moyen)] <- NA
#
#nb_prescriptions_sejour$New.IMC_moyen[
#  is.nan(nb_prescriptions_sejour$New.IMC_moyen)] <- NA
```

```{r}
#save(nb_prescriptions_sejour, file = "Recap_patients_sejours.Rda")
```

### Création du label Y (deuxième version)

```{r}
#for(i in 1:nrow(nb_prescriptions_sejour))
#{
#  if(nb_prescriptions_sejour$nb_prescriptions_antichol[i] != 0)
#  {
#    nb_prescriptions_sejour$Effets_secondaires[i] <- 1
#  }
#}
```

```{r}
#save(nb_prescriptions_sejour, file = "Recap_patients_sejours.Rda")
```

```{r}
load(file = "Recap_patients_sejours.Rda")
```

```{r}
nb_prescriptions_sejour
```

```{r}
## Sauvegarde des résultats

save.image(file = "reorganisation_donnees_prescriptions.RData")
```

```{r}
#rm(list = ls())
```

```{r}
## Chargement des résultats

#load(file = "reorganisation_donnees_prescriptions.RData")
```








